NAMES = ["CTLrep1","CTLrep2","CTLrep3","KOrep1","KOrep2","KOrep3"]
READS = ["R1", "R2"]

rule all:
	input:
		'results/multiqc_report.html',
		expand('results/{name}_flagstats.txt', name=NAMES),
		'results/verse_concat_filtered.csv',
		'results/id2gene.txt'

rule fastqc:
	input:
		'samples/{name}_{read}.fastq.gz'
	output:
		'results/{name}_{read}_fastqc.html'
	params:
		'results/'
	conda:
		'envs/fastqc_env.yml'
	shell:
		'''
		fastqc {input} --outdir {params}
		'''

rule multiqc:
	input:
		expand('results/{name}_{read}_fastqc.html', name=NAMES, read=READS)
	output:
		'results/multiqc_report.html'
	params:
		'results/'
	conda:
		'envs/multiqc_env.yml'
	shell:
		'''
		multiqc -f {params} -o {params}
		'''
		
rule star:
	input:
		r1 = 'samples/{name}_R1.fastq.gz',
		r2 = 'samples/{name}_R2.fastq.gz',
		star = 'samples/m39_star/'
	output:	
		'results/{name}.Aligned.out.bam'
	params:
		'results/{name}.'
	threads: 8
	conda:
		'envs/star_env.yml'
	shell:
		'''
		STAR --runThreadN {threads} --genomeDir {input.star} --readFilesIn {input.r1} {input.r2} --readFilesCommand zcat --outSAMtype BAM Unsorted --outFileNamePrefix {params}
		'''

rule samtools_flagstat:
	input:
		expand('results/{name}.Aligned.out.bam', name=NAMES)
	output:
		'results/{name}_flagstats.txt'
	conda:
		'envs/samtools_env.yml'
	shell:
		'''
		samtools flagstats {input} > {output}
		'''

rule multiqc_align:
	input:
		expand('results/{name}_flagstats.txt', name=NAMES)
	output:
		"results/multiqc_report_align.html"
	params:
		outdir = 'results'
	conda:
		'envs/multiqc_env.yml'
	shell:
		"""
		multiqc -f {params.outdir} -o {params.outdir}
		"""

rule verse:
	input:
		bam = 'results/{name}.Aligned.out.bam',
		gtf = 'results/gencode.vM33.primary_assembly.annotation.gtf',
	output:
		'results/{name}.exon.txt'
	params:
		'results/{name}'
	conda:
		'envs/verse_env.yml'
	shell:
		'''
		verse -S -a {input.gtf} -o {params} {input.bam}
		'''

rule concat_verse:
	input:
		expand('results/{name}.exon.txt', name=NAMES)
	output:
		'results/verse_concat.csv'
	shell:
		'''
		python concat_df.py -i {input} -o {output}
		'''
		
rule filter_cts:
	input:
		 'results/verse_concat.csv'
	output:
		'results/verse_concat_filtered.csv'
	shell:
		'''
		python filter_cts_mat.py -i {input} -o {output}
		'''

rule txn_mapping:
	input:
		'results/gencode.vM33.primary_assembly.annotation.gtf'
	output:
		'results/id2gene.txt'
	shell:
		'''
		python parse_gtf.py -i {input} -o {output}
		'''